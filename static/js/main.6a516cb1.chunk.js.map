{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","selectedGoods","addGood","good","setState","removeGood","selectedGood","filter","deleteGoods","finalGood","lastGood","pop","length","join","this","className","type","onClick","map","classNames","selected","includes","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qQAIMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAOWC,EAAb,4MACEC,MAAe,CACbC,cAAe,CAAC,QAFpB,EAKEC,QAAU,SAACC,GACT,EAAKC,UAAS,SAAAJ,GAAK,MAAK,CACtBC,cAAc,GAAD,mBAAMD,EAAMC,eAAZ,CAA2BE,SAP9C,EAWEE,WAAa,SAACC,GACZ,EAAKF,UAAS,SAAAJ,GAIZ,MAAO,CACLC,cAJoBD,EAAMC,cACzBM,QAAO,SAAAJ,GAAI,OAAIA,IAASG,UAdjC,EAsBEE,YAAc,WACZ,EAAKJ,SAAS,CACZH,cAAe,MAxBrB,EA4BEQ,UAAY,SAACR,GACX,IAEMS,EAFS,YAAOT,GAEKU,MAE3B,OAAQV,EAAcW,QACpB,KAAK,EACH,MAAO,oBACT,KAAK,EACH,MAAM,GAAN,OAAUX,EAAc,GAAxB,gBACF,KAAK,EACH,MAAM,GAAN,OAAUA,EAAcY,KAAK,SAA7B,iBACF,QACE,MAAM,GAAN,OAAUZ,EAAcY,KAAK,MAA7B,gBAA0CH,EAA1C,mBAzCR,4CA6CE,WAAU,IAAD,OACCT,EAAkBa,KAAKd,MAAvBC,cAER,OACE,sBAAKc,UAAU,uCAAf,UACE,oBAAIA,UAAU,iCAAd,SACGD,KAAKL,UAAUR,KAGjBA,EAAcW,OAAS,GACtB,wBACEG,UAAU,8BACVC,KAAK,SACLC,QAAS,kBAAM,EAAKT,eAHtB,eASF,oBAAIO,UAAU,eAAd,SACGjB,EAAgBoB,KAAI,SAACf,GAAD,OACnB,qBAEEY,UAAWI,IACT,YACA,CAAEC,SAAUnB,EAAcoB,SAASlB,KAJvC,UAOGA,EACAF,EAAcoB,SAASlB,GAEpB,wBACEY,UAAU,8BACVC,KAAK,SACLC,QAAS,kBAAM,EAAKZ,WAAWF,IAHjC,oBASA,wBACEY,UAAU,+BACVC,KAAK,SACLC,QAAS,kBAAM,EAAKf,QAAQC,IAH9B,mBAlBCA,eAnEnB,GAAyBmB,IAAMC,WClB/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6a516cb1.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype State = {\n  selectedGoods: string[],\n};\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    selectedGoods: ['Jam'],\n  };\n\n  addGood = (good: string) => {\n    this.setState(state => ({\n      selectedGoods: [...state.selectedGoods, good],\n    }));\n  };\n\n  removeGood = (selectedGood: string) => {\n    this.setState(state => {\n      const selectedGoods = state.selectedGoods\n        .filter(good => good !== selectedGood);\n\n      return {\n        selectedGoods,\n      };\n    });\n  };\n\n  deleteGoods = () => {\n    this.setState({\n      selectedGoods: [],\n    });\n  };\n\n  finalGood = (selectedGoods: string[]) => {\n    const copyGoods = [...selectedGoods];\n\n    const lastGood = copyGoods.pop();\n\n    switch (selectedGoods.length) {\n      case 0:\n        return 'No goods selected';\n      case 1:\n        return `${selectedGoods[0]} is selected`;\n      case 2:\n        return `${selectedGoods.join(' and ')} are selected`;\n      default:\n        return `${selectedGoods.join(', ')} and ${lastGood} are selected`;\n    }\n  };\n\n  render() {\n    const { selectedGoods } = this.state;\n\n    return (\n      <div className=\"App card has-background-grey-lighter\">\n        <h1 className=\"title has-background-white-ter\">\n          {this.finalGood(selectedGoods)}\n        </h1>\n\n        {selectedGoods.length > 0 && (\n          <button\n            className=\"card-button delete is-large\"\n            type=\"button\"\n            onClick={() => this.deleteGoods()}\n          >\n            X\n          </button>\n        )}\n\n        <ul className=\"card-content\">\n          {goodsFromServer.map((good) => (\n            <li\n              key={good}\n              className={classNames(\n                'card-text',\n                { selected: selectedGoods.includes(good) },\n              )}\n            >\n              {good}\n              {selectedGoods.includes(good)\n                ? (\n                  <button\n                    className=\"button is-danger is-rounded\"\n                    type=\"button\"\n                    onClick={() => this.removeGood(good)}\n                  >\n                    Remove\n                  </button>\n                )\n                : (\n                  <button\n                    className=\"button is-success is-rounded\"\n                    type=\"button\"\n                    onClick={() => this.addGood(good)}\n                  >\n                    Add\n                  </button>\n                )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}